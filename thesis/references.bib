@inproceedings{Cousot77,
  author = {Cousot, Patrick and Cousot, Radhia},
  title = {Abstract interpretation: a unified lattice model for static analysis 
    of programs by construction or approximation of fixpoints},
  year = {1977},
  isbn = {9781450373500},
  publisher = {Association for Computing Machinery},
  address = {New York, NY, USA},
  url = {https://doi.org/10.1145/512950.512973},
  doi = {10.1145/512950.512973},
  abstract = {A program denotes computations in some universe of objects. 
    Abstract interpretation of programs consists in using that denotation to 
    describe computations in another universe of abstract objects, so that the 
    results of abstract execution give some information on the actual 
    computations. An intuitive example (which we borrow from Sintzoff [72]) is 
    the rule of signs. The text -1515 * 17 may be understood to denote 
    computations on the abstract universe {(+), (-), (±)} where the semantics 
    of arithmetic operators is defined by the rule of signs. The abstract 
    execution -1515 * 17 → -(+) * (+) → (-) * (+) → (-), proves that 
    -1515 * 17 is a negative number. Abstract interpretation is concerned by a 
    particular underlying structure of the usual universe of computations (the 
    sign, in our example). It gives a summary of some facets of the actual 
    executions of a program. In general this summary is simple to obtain but 
    inaccurate (e.g. -1515 + 17 → -(+) + (+) → (-) + (+) → (±)). Despite its 
    fundamentally incomplete results abstract interpretation allows the 
    programmer or the compiler to answer questions which do not need full 
    knowledge of program executions or which tolerate an imprecise answer, 
    (e.g. partial correctness proofs of programs ignoring the termination 
    problems, type checking, program optimizations which are not carried in the 
    absence of certainty about their feasibility, …).},
  booktitle = {Proceedings of the 4th ACM SIGACT-SIGPLAN Symposium on Principles
    of Programming Languages},
  pages = {238–252},
  numpages = {15},
  location = {Los Angeles, California},
  series = {POPL '77}
}

@techreport{Scott70,
  title = "OUTLINE OF A MATHEMATICAL THEORY OF COMPUTATION",
  author = "Dana Scott",
  year = "1970",
  institution = "OUCL",
  month = "November",
  number = "PRG02",
  pages = "30",
}


@unpublished{Dijkstra74,
  author = "Edsger W. Dijkstra",
  title = "Guarded commands, non-determinacy and a calculus for the derivation 
   of programs",
  month = jun,
  year = "1974",
  note = "see {\cite EWD:EWD472}; circulated privately",
  url = "http://www.cs.utexas.edu/users/EWD/ewd04xx/EWD418.PDF",
}

@article{Cousot12,
  author = {Cousot, Patrick and Cousot, Radhia and Logozzo, Francesco and 
    Barnett, Michael},
  year = {2012},
  month = {10},
  pages = {},
  title = {An Abstract Interpretation Framework for Refactoring with 
    Application to Extract Methods with Contracts},
  volume = {47},
  isbn = {978-1-4503-1561-6},
  journal = {ACM SIGPLAN Notices},
  doi = {10.1145/2384616.2384633}
}


@article{Cook78,
  author = {Cook, Stephen A.},
  title = {Soundness and Completeness of an Axiom System for Program 
    Verification},
  journal = {SIAM Journal on Computing},
  volume = {7},
  number = {1},
  pages = {70-90},
  year = {1978},
  doi = {10.1137/0207005},
  URL = { https://doi.org/10.1137/0207005 },
  eprint = { https://doi.org/10.1137/0207005 },
  abstract = { A simple ALGOL-like language is defined which includes 
    conditional, while, and procedure call statements as well as blocks. A 
    formal interpretive semantics and a Hoare style axiom system are given for 
    the language. The axiom system is proved to be sound, and in a certain sense 
    complete, relative to the interpretive semantics. The main new results are 
    the completeness theorem, and a careful treatment of the procedure call 
    rules for procedures with global variables in their declarations. }
}
